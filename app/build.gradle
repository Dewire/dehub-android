apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'checkstyle'

android {
    compileSdkVersion 25
    buildToolsVersion "24.0.2"
    defaultConfig {
        applicationId "com.dewire.dehub"
        minSdkVersion 21
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro', 'proguard-rules-libs.pro'
        }
        debug {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules-debug.pro', 'proguard-rules-libs.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        abortOnError true
        // see: https://github.com/square/okio/issues/58
        disable 'InvalidPackage'
    }
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def lintTask = tasks["lint${variant.name.capitalize()}"]
            def testTask = tasks["test${variant.name.capitalize()}UnitTest"]
            output.assemble.dependsOn lintTask, testTask
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.0.0'
    compile 'com.android.support:recyclerview-v7:25.0.0'
    compile 'com.android.support:design:25.0.0'
    testCompile 'junit:junit:4.12'
    testCompile 'org.powermock:powermock-api-mockito:1.6.6'
    testCompile 'org.powermock:powermock-module-junit4-rule-agent:1.6.6'
    testCompile 'org.powermock:powermock-module-junit4-rule:1.6.6'
    testCompile 'org.powermock:powermock-module-junit4:1.6.6'

    compile 'com.google.guava:guava:20.0'
    compile 'io.reactivex:rxjava:1.2.1'
    compile 'io.reactivex:rxandroid:1.2.1'
    compile 'com.jakewharton.rxbinding:rxbinding:0.4.0'
    compile 'com.jakewharton.rxbinding:rxbinding-appcompat-v7:0.4.0'
    compile 'com.squareup.moshi:moshi:1.3.1'
    compile 'com.squareup.retrofit2:retrofit:2.1.0'
    compile 'com.squareup.retrofit2:adapter-rxjava:2.1.0'
    compile 'com.squareup.retrofit2:converter-scalars:2.1.0'
    compile 'com.squareup.retrofit2:converter-moshi:2.1.0'
    compile 'com.squareup.okhttp3:logging-interceptor:3.4.1'
    compile 'info.android15.nucleus:nucleus:4.0.0'
    compile 'info.android15.nucleus:nucleus-support-v4:4.0.0'
    compile 'info.android15.nucleus:nucleus-support-v7:4.0.0'

    annotationProcessor 'com.jakewharton:butterknife-compiler:8.4.0'
    compile 'com.jakewharton:butterknife:8.4.0'

    annotationProcessor 'com.google.dagger:dagger-compiler:2.7'
    compile 'com.google.dagger:dagger:2.7'
    provided 'javax.annotation:jsr250-api:1.0'

    provided 'com.google.auto.value:auto-value:1.3'
    annotationProcessor 'com.google.auto.value:auto-value:1.3'
    provided 'com.ryanharter.auto.value:auto-value-moshi:0.4.0'
    annotationProcessor 'com.ryanharter.auto.value:auto-value-moshi:0.4.0'
    annotationProcessor 'com.ryanharter.auto.value:auto-value-parcel:0.2.5'

    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'
    testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'
}


task checkstyle(type: Checkstyle) {
    // Cleaning the old log because of the creation of the new ones (not sure if totally needed)
    delete fileTree(dir: "${project.rootDir}/app/build/reports")
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    // Empty classpath
    classpath = files()
    // Failing the build
    ignoreFailures = false
}

checkstyle {
    configFile file("${project.rootDir}/config/quality/checkstyle/checkstyle.xml")
    toolVersion = '7.1.1'
    ignoreFailures = false
}

project.afterEvaluate {
    preBuild.dependsOn 'checkstyle'
}

// You need this hack for the build to fail on Checkstyle warnings. This should be
// changed if this issue is resolved: https://issues.gradle.org/browse/GRADLE-2888
tasks.withType(Checkstyle).each { checkstyleTask ->
    checkstyleTask.doLast {
        reports.all { report ->
            def outputFile = report.destination
            if (outputFile.exists() && outputFile.text.contains("<error ")) {
                throw new GradleException(
                        "There were checkstyle warnings! For more info check $outputFile")
            }
        }
    }
}
